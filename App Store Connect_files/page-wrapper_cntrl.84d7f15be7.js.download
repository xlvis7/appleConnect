'use strict';
//new
define(['sbl!app'], function (itcApp) {
    var pageWrapperController = function ($q, $scope, sharedProperties,
        $rootScope, userSessionService, localizationService,
        referenceDataService, $sce, $cookies, mainNavService, $location,
        appDetailsService, $state, $stateParams, ITC, multiProviderServices,
        $cookieStore) {

        $scope.updateMainNav = function () {
            $scope.onHomepage = !!($rootScope.currentPage === "Homepage");
        };

      //purposefully generic name
      $scope.toggleKeys = function () {
        var isSoftware = false;
        if ($scope.user && $scope.user.contentProviderType && $scope.user.contentProviderType === 'Purple Software') {
            isSoftware = true;
        }
        return $scope.hasContentProviderFeature('ITC_ASC') && isSoftware;
      }


        $scope.loadUserSession = function () {
            userSessionService.async().then(function (data) {
                $scope.user = data.data;
                usersessionloaded = true;
                //sort providers by name alpha
                if ($scope.user.associatedAccounts !== undefined
                    && $scope.user.associatedAccounts.length > 1) {
                    $scope.user.associatedAccounts = _.sortBy(
                        $scope.user.associatedAccounts, function (acct) {
                            return acct.contentProvider.name.toLowerCase();
                        });
                    //pull out current provider from list and put at top
                    angular.forEach($scope.user.associatedAccounts,
                        function (acct, key) {
                            if (acct.contentProvider.contentProviderId
                                === $scope.user.sessionToken.contentProviderId) {
                                $scope.user.associatedAccounts.move(key, 0);
                            }
                        });
                }
                $scope.isITCHeaderFeatureEnabled = $scope.hasContentProviderFeature(
                    'ITC_HEADER');

                $scope.checkIsReady();
            });
        };

        $scope.hasProviderFeature = function (feature) {
            var collection = deep($scope, 'user.contentProviderFeatures');
            if (!collection) {
                return null;
            }
            return (collection.indexOf(feature) >= 0);
        };

        $scope.hasUserFeature = function (feature) {
            var collection = deep($scope, 'user.userFeatures');
            if (!collection) {
                return null;
            }
            return (collection.indexOf(feature) >= 0);
        };

        $scope.hasEditPermittedActivity = function (feature) {
            var collection = deep($scope, 'user.permittedActivities.EDIT');
            if (!collection) {
                return true;
            } //default to show if permittedActivities doesn't exist
            return (collection.indexOf(feature) >= 0);
        }
        $scope.hasViewPermittedActivity = function (feature) {
            var collection = deep($scope, 'user.permittedActivities.VIEW');
            if (!collection) {
                return true;
            } //default to show if permittedActivities doesn't exist
            return (collection.indexOf(feature) >= 0);
        }

        $scope.hasContentProviderFeature = function (feature) {
            var collection = deep($scope, 'user.contentProviderFeatures');
            if (!collection) {
                return null;
            } //default to show if permittedActivities doesn't exist
            return (collection.indexOf(feature) >= 0);
        }

        $scope.loadMainNavModules = function () {
            mainNavService.olympusSession().then(function (data) {
                $scope.mainNavigation = data.moduleData;
                $rootScope.sessionData = data;

                // Replace the default name property (which the shared header uses for module icon labels) coming in modules endpoint with the localized key iconTextKey rdar://problem/26840154
                $scope.mainNavigation = _.each($scope.mainNavigation,
                    function (module) {
                        module.name = $scope.l10n.interpolate(
                            module.name);
                    });

                $scope.pageWrapperVars.mainNavigationCount = $scope.mainNavigation.length;
                mainNavloaded = true;
                $scope.checkIsReady();
            });
        };

        $scope.loadHelpResourcesNav = function () {
            mainNavService.helpResourcesNav().then(function (data) {
                $scope.helpResources = data.data;
                helpResourcesloaded = true;
                $scope.checkIsReady();
                $scope.showHelpResources = false;
                if ($scope.helpResources.length) {
                    $scope.showHelpResources = true;
                    /*$scope.resourcesAll = _.findWhere($scope.helpResources, {linkKey: "All"});
                    $scope.resourcesNews = _.findWhere($scope.helpResources, {linkKey: "News"});
                    $scope.resourcesGuides = _.findWhere($scope.helpResources, {linkKey: "Guides"});
                    $scope.resourcesVideos = _.findWhere($scope.helpResources, {linkKey: "Videos"});
                    $scope.resourcesFAQ = _.findWhere($scope.helpResources, {linkKey: "FAQ"});
                    $scope.resourcesConactUs = _.findWhere($scope.helpResources, {linkKey: "ContactUs"});*/
                }

            });
        }

        $scope.ITC = ITC;

        var updateKeyFlags = function () {
            if (typeof $scope.l10n.nowTimeStamp === 'undefined' || $scope.l10n.isUpdating) return;

            // Collect unique key stats
            var touchedKeys = Array.from($scope.l10n.touchedKeys);
            var missedKeys = Array.from($scope.l10n.missedKeys);
            var keyList = touchedKeys.concat(missedKeys);
            if (keyList.length === 0) return;

            $scope.l10n.isUpdating = true;
            return localizationService.updateFlags(keyList, $scope.l10n.nowTimeStamp, $scope.l10n.context)
                .then(function (data) {
                    if (data.statusCode == 'SUCCESS') {
                        var keysLeft = new Set(keyList);
                        var returnedKeys = data.data.keys;
                        for (var key in returnedKeys) {
                            $scope.l10n.keys[key] = returnedKeys[key];
                            keysLeft.delete(key);
                        }

                        // Keep track of 'not found' keys (totally missing / invalid keys)
                        var existingNotFound = Array.from($scope.l10n.notFound);
                        var newNotFound = Array.from(keysLeft).concat(existingNotFound);
                        $scope.l10n.notFound = new Set(newNotFound);

                        // Clear existing usage stats:
                        $scope.l10n.touchedKeys = new Set();
                        $scope.l10n.missedKeys = new Set();
                        // reset now ts
                        $scope.l10n.nowTimeStamp = data.data.nowTimeStamp;
                    }
                    $scope.l10n.isUpdating = false;
                });
        }

        function touchedKey(key, value) {
            if (!!key && typeof value === 'object' && typeof $scope.l10n.nowTimeStamp !== 'undefined') {
                var today = $scope.l10n.nowTimeStamp;
                var keyTimestamp = value.ts;
                if (keyTimestamp < today) {
                    $scope.l10n.touchedKeys.add(key);
                    $scope.l10n.update();
                }
            }
        }

        function missedKey(key) {
            if (!!key && !$scope.l10n.notFound.has(key)) { // key exists and is not already in 'notFound' list
                $scope.l10n.missedKeys.add(key);
                $scope.l10n.update();
            }
        }

        // The interpolate function allows us to replace arbitrary variables with their appropriate value
        // Usage: l10n.interpolate( <localization key>, <data object>)
        var interpolateFunc = function (localizationKey, replacements) {
            if (localizationloaded && !!localizationKey) {
                // Check if key exists
                var foundKey = $scope.l10n.keys[localizationKey];
                if (!foundKey) {
                    missedKey(localizationKey);
                    if($scope.referenceData && $scope.referenceData.isDevOrQA)
                        return '**' + localizationKey + '**'; // return screamer
                    else // is prod or not sure if this is devQA or  - return string as non-screamer
                        return localizationKey;
                }
                touchedKey(localizationKey, foundKey);

                var text = foundKey; // get string value of loc key
                if (typeof text === 'object') {
                    text = text.loc; // if l10n is managed, string value is in 'loc' property
                }

                // replace @@params@@ w/ values from replacements obj
                if (typeof replacements === 'object' && Object.keys(replacements).length > 0) {
                    Object.keys(replacements).forEach((key) => {
                        text = text.replace(RegExp('\@\@' + key + '\@\@', 'gi'), replacements[key]);
                    });
                }
                return text;
            }
            return localizationKey;
        };

        $scope.l10n = {
            interpolate: interpolateFunc,
            keys: {},
            missedKeys: new Set(),
            touchedKeys: new Set(),
            notFound: new Set()
        };

        $scope.loc = $scope.l10n.interpolate;

        $scope.loadLocalizationKeys = function () {
            var localizationServiceMethod = localizationService.asyncManaged;
            return localizationServiceMethod().then(function (data) {
                // Store the localization array
                if (data.data['_l10n_isManaged'] === 'false') {
                    $scope.l10n.keys = data.data; // not managed, so we map keys = data.data
                } else {
                    // Managed:
                    $scope.l10n.keys = data.data.keys;
                    $scope.l10n.nowTimeStamp = data.data.nowTimeStamp;
                    $scope.l10n.context = data.data.context;
                }

                // clear usage stats:
                $scope.l10n.touchedKeys = new Set();
                $scope.l10n.missedKeys = new Set();
                $scope.l10n.notFound = new Set();
                $scope.l10n.update = _.debounce(updateKeyFlags, 4000);

                localizationloaded = true;
                $rootScope.l10n = $scope.l10n;
                $scope.checkIsReady();
                return $scope.l10n;
            });
        };

        $scope.loadReferenceData = function () {
            return referenceDataService.async().then(function (data) {

                $scope.referenceData = data.data;
                $rootScope.referenceData = $scope.referenceData;

                referenceDataloaded = true;
                $scope.checkIsReady();

                //load dev/qa header info
                $scope.loadDevQAHeaderInfo();
                return $scope.referenceData;
            });
        };

        $rootScope.storageitems = {};

        $scope.setNewProvider = function (providerId) {
            if (providerId !== $scope.user.sessionToken.contentProviderId) {
                $state.go('switch', {'newproviderid': providerId});
            }
        }

        $scope.setupFooter = function () {
          $rootScope.footerNavConfig = {
              links: [
                  {
                      text: $scope.l10n.interpolate(
                          'ITC.HeaderFooter.termsOfServiceLinkText'),
                      url: '/WebObjects/iTunesConnect.woa/wa/termsOfService',
                      modal: true,
                  },
                  {
                      text: $scope.l10n.interpolate(
                          'ITC.HeaderFooter.PrivacyPolicyLinkText'),
                      url: 'https://www.apple.com/legal/privacy'
                  },
                  {
                      text: $scope.l10n.interpolate(
                          'ITC.HeaderFooter.ContactUsLinkText'),
                      url: global_itc_path + '/wa/jumpTo?page=contactUs'
                  }
              ],
              text: {
                  done: $scope.l10n.interpolate('ITC.Done.Button'),
                  tosHeader: $scope.l10n.interpolate(
                      'ITC.HeaderFooter.termsOfServiceLinkText'),
                  copyright: $scope.l10n.interpolate(
                      'ITC.HeaderFooter.Copyright.withSymbol'),
                  rights: $scope.l10n.interpolate(
                      'ITC.HeaderFooter.Copyright.AppleRightsReserved')
              }
              /*options: {
                  contactUrl:     global_itc_path + '/wa/jumpTo?page=contactUs',
                  privacyText:    $scope.l10n.interpolate('ITC.HeaderFooter.PrivacyPolicyLinkText'),
                  contactText:    $scope.l10n.interpolate('ITC.HeaderFooter.ContactUsLinkText'),
                  tosText:        $scope.l10n.interpolate('ITC.HeaderFooter.termsOfServiceLinkText'),
                  rightsText:     $scope.l10n.interpolate('ITC.HeaderFooter.Copyright.AppleRightsReserved'),
                  copyrightText:  $scope.l10n.interpolate('ITC.HeaderFooter.Copyright.text'),
                  doneCtaText:    $scope.l10n.interpolate('ITC.Done.Button')
              }*/
          };
        }

        //var sharedPropertiesObj = sharedProperties.isReady();
        $scope.checkIsReady = function () {
            if (usersessionloaded && localizationloaded && referenceDataloaded
                && mainNavloaded && helpResourcesloaded) {
                //let child scope know we're ready...
                $scope.parentScopeLoaded = true;
                $scope.$broadcast("parentScopeLoaded");

                var baseHost = location.protocol + '//' + location.hostname;

                if ($rootScope.headerConfig !== undefined) {
                    $rootScope.headerConfig.title.text = $scope.currentPage
                    !== undefined ? $scope.currentPage : '';
                    $rootScope.headerConfig.title.className = $rootScope.currentclass
                    !== undefined ? $rootScope.currentclass : '';
                } else {
                    $scope.user.publicUserId = $rootScope.sessionData.publicUserId;
                    $rootScope.headerConfig = {
                        title: {
                            text: $scope.currentPage !== undefined
                                ? $scope.currentPage : '',
                            url: '',
                            className: $rootScope.currentclass !== undefined
                                ? $rootScope.currentclass : ''
                        },

                        itcBaseUrl: baseHost,
                        itcHomeUrl: baseHost,

                        apis: {
                            user: {//: baseHost + global_itc_path + '/ra/user/detail',
                                response: {data: $scope.user}
                            },
                            header: {//baseHost + global_itc_path + '/ra/nav/header/modules',
                                response: {data: {data: $scope.mainNavigation}}
                            },
                            help: { //baseHost + global_itc_path + '/ra/nav/help/links',
                                response: {data: {data: $scope.helpResources}}
                            },
                            //session: baseHost + global_itc_path + '/ra/v1/session/webSession'
                            //managing this locally//
                            session: {
                                url: null,
                                override: function (app) {
                                    $scope.setNewProvider(app)
                                }
                            }
                        },
                        signOut: {
                            text: $scope.l10n.interpolate(
                                'ITC.HeaderFooter.SignoutLinkText'),
                            url: $scope.signoutlink //baseHost + global_itc_path +'/wa/logout'
                        },
                        userDetail: {
                            fullName: $scope.l10n.interpolate(
                                'ITC.user.firstLastName', {
                                    firstName: $scope.user.firstname,
                                    lastName: $scope.user.lastname
                                }),
                            text: $scope.l10n.interpolate(
                                'ITC.HeaderFooter.PersonalDetailsLinkText'),
                            url: baseHost + global_itc_path
                            + '/ra/ng/users_roles'
                        },
                        appSwitcherData: {
                            apps: [],
                            application: {},
                            showListLink: "true",
                            baseIcon: getGlobalPath(
                                '/itc/img/ico_homepage/MyApps.png'),
                            applicationLabel: $scope.l10n.interpolate(
                                'ITC.HomePage.ManagePurpleSoftwareLinkText'),
                            searchLabel: $scope.l10n.interpolate(
                                'ITC.component.search.label'),
                            noResultsLabel: $scope.l10n.interpolate(
                                'ITC.NoResults'),
                            onAppSelect: function (app) {
                                if (ITC.roles.hasUserRole($scope.user,
                                        'Customer Support', true)) {
                                    if (app.platforms.length === 1
                                        && app.platforms[0].toLowerCase()
                                        === 'appletvos') {
                                        $state.go(
                                            'app_overview.ratings', {
                                                'adamId': app.id,
                                                'platform': app.platforms[0].toLowerCase()
                                            });
                                    } else {
                                        $state.go(
                                            'app_overview.ratingsResponses', {
                                                'adamId': app.id,
                                                'platform': app.platforms[0].toLowerCase()
                                            });
                                    }
                                }
                                else {
                                    $state.go('app_overview.store.appinfo',
                                        {'adamId': app.id})
                                }
                            },
                            goToList: function () {
                                $state.go('my_apps');
                            }
                        }
                    };
                }

            } else {
                $scope.parentScopeLoaded = false;
            }
            if ($rootScope.isReady && usersessionloaded && localizationloaded
                && referenceDataloaded && helpResourcesloaded
                && mainNavloaded) {
                $scope.isLoaded = true;
                $scope.$broadcast("pageIsLoaded");

                $scope.setupFooter(); // after page is loaded
            } else {
                $scope.isLoaded = false;
            }
        }

        $scope.getYear = new Date().getFullYear();
        $scope.showTOS = function () {
            $scope.pageWrapperVars.showTOS = true;
        }
        $scope.closeTOS = function () {
            $scope.pageWrapperVars.showTOS = false;
        }

        //onLoad
        var usersessionloaded = false;
        var localizationloaded = false;
        var referenceDataloaded = false;
        var mainNavloaded = false;
        var helpResourcesloaded = false;
        $scope.parentScopeLoaded = false;
        $scope.signoutlink = global_itc_path + "/wa/logout";

        $scope.updateMainNav();
        $scope.checkIsReady();
        $scope.loadUserSession();

        $q.all(
            [$scope.loadLocalizationKeys(), $scope.loadReferenceData()]).then(
            function () {
                $scope.loadMainNavModules();
            });
        $scope.loadHelpResourcesNav();
        $scope.isSaving = false;
        $scope.pageWrapperVars = {};
        $scope.pageWrapperVars.showTOS = false;

        //global environment variables to use in HTML
        $scope.global_itc_path = global_itc_path;
        $scope.global_itc_home_url = global_itc_home_url;

        $scope.setIsSaving = function (isItSaving) {
            $scope.isSaving = !!(isItSaving);
        }

        $scope.setIsLoading = function (isItLoading) {
            if (isItLoading) {
                $scope.isLoaded = false;
            } else {
                $scope.isLoaded = true;
            }
        }

        //For Dev/QA Headers...adamid and bundle id display
        $rootScope.$on('$stateChangeSuccess', function () {
            $scope.loadDevQAHeaderInfo();
        });
        $scope.loadDevQAHeaderInfo = function () {
            if ($scope.referenceData !== undefined
                && $scope.referenceData.isDevOrQA) {
                $scope.pageWrapperVars.adamId = $scope.getAdamIdFromPath();
                if ($scope.pageWrapperVars.adamId !== undefined
                    && $scope.pageWrapperVars.adamId !== null
                    && $scope.pageWrapperVars.adamId !== '') {
                    $scope.loadHeaderData($scope.pageWrapperVars.adamId);
                }
            }
        }
        $scope.getAdamIdFromPath = function () {
            var path = $location.path();
            var pathParts = path.split("/");
            //if first item in path is "app" get adam id (should be second value)
            if (pathParts[1] == "app" && pathParts[2]) {
                return pathParts[2];
            } else {
                return null;
            }
        }
        $scope.loadHeaderData = function (adamId) {
            if (adamId !== null && adamId !== '') {

                // If we already have this app's info in $rootScope, then re-use it...
                if ($rootScope.appPageHeader !== undefined
                    && $rootScope.appPageHeader.adamId == adamId) {
                    var appData = $rootScope.appPageHeader;
                    $scope.pageWrapperVars.bundleId = appData.bundleId.value.replace(
                        "*", "") + (deep(appData.bundleIdSuffix.value)
                        ? appData.bundleIdSuffix.value : '');
                    // ...otherwise load a fresh copy from the server
                } else {
                    appDetailsService.debugInfo(adamId).then(function (data) {
                        if (data.status == "500" || data.status == "403" || data
                            === undefined || data.data === undefined) {
                            //error
                        } else {
                            /*if (data.data.bundleIdSuffix !== null && data.data.bundleIdSuffix.value !== null) {
                                $scope.pageWrapperVars.bundleId = data.data.bundleId.replace("*","") + data.data.bundleIdSuffix.value;
                            } else {
                                $scope.pageWrapperVars.bundleId = data.data.bundleId;
                                    }*/
                            $scope.pageWrapperVars.bundleId = data.data.bundleId;
                        }
                    });
                }
            }
        }

        var constructHier = function (val) {
            var val = val || '', hierString = '';
            var isProd = (location.hostname === "itunesconnect.apple.com")
                ? true : false;
            if (val !== '') {
                hierString += 'appleitmsitc' + val + ((isProd) ? '' : 'qa')
                    + 'dev,';
            }
            hierString += 'appleitmsitc' + ((isProd) ? '' : 'qa') + 'dev';
            return hierString;
        };

        var applyTrackingMetadata = function (trackingConfig) {
            var c = trackingConfig;
            if (c === undefined) {
                return false;
            }
            s.pageName = (c.pageName !== undefined) ? c.pageName : ''; // e.g. "App - Summary"
            s.channel = (c.channel !== undefined) ? c.channel : ''; // e.g. "Manage Your App"
            s.hier5 = constructHier(c.hier5); // e.g. "appleitmsitcdev"
            return trackingConfig;
        };

        $rootScope.$watch('currentPage', function (value) {
            $scope.currentPage = value;
            if ($rootScope.headerConfig !== undefined) {
                //$scope.headerConfig.options.title.text = value;
                $rootScope.headerConfig.title.text = value;
                $rootScope.headerConfig.title.className = $rootScope.currentclass;
            }
            $scope.updateMainNav();
        });
        $rootScope.$watch('currentclass', function (value) {
            if ($rootScope.headerConfig !== undefined) {
                $rootScope.headerConfig.title.className = $rootScope.currentclass;
            }
        });
        $rootScope.$watch('isReady', function (value) {
            $scope.checkIsReady();
        });
        $rootScope.$on('$stateChangeStart',
            function (event, next, toParams, current, fromParams) {
                //is state part of the "app store" group:
                var nameStatesArray = next.name.split('.');
                if (_.indexOf(nameStatesArray, 'app_overview') >= 0
                    && _.indexOf(nameStatesArray, 'store') >= 0) {
                    $scope.hasSidebar = true;
                } else {
                    $scope.hasSidebar = false;
                }
                if (next.data && next.data.trackingConfig) {
                    applyTrackingMetadata(next.data.trackingConfig);
                }
            });

        $rootScope.$on('$stateChangeSuccess',
            function (ev, to, toParams, from, fromParams) {
                $rootScope.urlChangeSuccessFrom = from;
                $rootScope.urlChangeSuccessFromParams = from;
                $rootScope.urlChangeSuccessFromURL = window.location.pathname;
            });

        /********* GLOBAL UTILITY FUNCTIONS *********/
        $scope.renderHtml = function (html_code) {
            return $sce.trustAsHtml(html_code);
        };
        $scope.showHtml = $scope.renderHtml;

        $scope.getGlobalFilePathMap = function (filepath) {
            return getGlobalPath(filepath);
        }

        //use to reutn values from JSON without ng-repeat's auto sorting
        $scope.notSorted = function (obj) {
            if (!obj) {
                return [];
            }
            return Object.keys(obj);
        }
        $scope.urlEncode = function (string) {
            return encodeURIComponent(string);
        }

        $scope.showDebugMenu = function () {
            $scope.debugMenuVisible = true;
        }
        $scope.hideDebugMenu = function () {
            $scope.debugMenuVisible = false;
        }

        $scope.hasValue = function (val) {
            return (val !== null && val !== undefined);
        }

        //global values
        $scope.globalOptions = {
            ngModelOptions: {
                updateOn: 'default blur',
                debounce: {'default': 100, 'blur': 0},
                allowInvalid: true
            }
        }

        //store current and last state in rootscope
        $rootScope.previousState;
        $rootScope.currentState;
        $rootScope.$on('$stateChangeSuccess',
            function (ev, to, toParams, from, fromParams) {
                $rootScope.previousState = from.name;
                $rootScope.currentState = to.name;
            });

    }

    itcApp.controller('pageWrapperController',
        ['$q', '$scope', 'sharedProperties', '$rootScope', 'userSessionService',
            'localizationService', 'referenceDataService', '$sce', '$cookies',
            'mainNavService', '$location', 'appDetailsService', '$state',
            '$stateParams', 'ITC', 'multiProviderServices', '$cookieStore',
            pageWrapperController]);

});
