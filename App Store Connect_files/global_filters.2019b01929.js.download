define([], function () {

	var global_filters = angular.module('global_filters', []);

	global_filters.filter('statusClass',function(){
		return function(status) {
			switch(status) {
				case 0:
					return "ready";
				case 1:
					return "waiting";
				case 2:
					return "attn";
			}
		};
	});

	global_filters.filter('startFrom', function() {
	    return function(input, start) {
	        if(input && !_.isEmpty(input)) {
	            start = +start; //parse to int
	            return input.slice(start);
	        }
	        return [];
	    };
	});

	global_filters.filter('threeColSort',function(){
		return function(arr) {
			if (arr !== undefined) {
				var maxColLength = Math.ceil(arr.length/3);
				var trackCount = 1;
				var newArray = [];
				for(var i = 0; i < maxColLength; i++) {
					newArray.push(arr[i]);
					if (arr[maxColLength + i] !== undefined) {
						newArray.push(arr[maxColLength + i])
					}
					if (arr[(maxColLength*2) + i] !== undefined) {
						newArray.push(arr[(maxColLength*2) + i])
					}
				}
				return newArray;
			}
		}
	});

	global_filters.filter('addSpaceAfterComma',function(){
		return function(text) {
			if (text != undefined && text != "") {
				return text.replace(/,/g, ', ');
			}
			return text;
		}
	});
	global_filters.filter('monthFormat',function(){
		return function(month) {
			switch(month) {
				case 0:
					return "Jan";
				case 1:
					return "Feb";
				case 2:
					return "Mar";
				case 3:
					return "Apr";
				case 4:
					return "May";
				case 5:
					return "Jun";
				case 6:
					return "Jul";
				case 7:
					return "Aug";
				case 8:
					return "Sep";
				case 9:
					return "Oct"
				case 10:
					return "Nov";
				case 11:
					return "Dec";
			}
		};
	});

    global_filters.filter('characters', function () {
        return function (input, chars, breakOnWord) {
            if (isNaN(chars)) return input;
            if (chars <= 0) return '';
            if (input && input.length > chars) {
                input = input.substring(0, chars);

                if (!breakOnWord) {
                    var lastspace = input.lastIndexOf(' ');
                    //get last space
                    if (lastspace !== -1) {
                        input = input.substr(0, lastspace);
                    }
                }else{
                    while(input.charAt(input.length-1) === ' '){
                        input = input.substr(0, input.length -1);
                    }
                }
                return input + "&hellip;";
            }
            return input;
        };
    });

    global_filters.filter('words', function () {
        return function (input, words) {
            if (isNaN(words)) return input;
            if (words <= 0) return '';
            if (input) {
                var inputWords = input.split(/\s+/);
                if (inputWords.length > words) {
                    input = inputWords.slice(0, words).join(' ') + "&hellip;";
                }
            }
            return input;
        };
    });

    itcApp.config(['$provide', function($provide) {
        // decorate the number filter to allow for a 3rd argument
        // used for special cases where some locales have different seperators for different types of numbers
        $provide.decorator('numberFilter', ['$delegate', '$locale', 'localeBackup', function($delegate, $locale, localeBackup) {
            var srcFilter = $delegate;

            var extendsFilter = function() {
                switch(arguments[2]) {
                    // if 'useStandardDecimalSep' is passed then will override the locale's NUMBER_FORMATS.DECIMAL_SEP with the standard '.'
                    case 'useStandardDecimalSep':
                        if ($locale.id.toLowerCase() === 'ru-ru') {
                            $locale.NUMBER_FORMATS.DECIMAL_SEP = ".";
                        } else {
                            $locale.NUMBER_FORMATS.DECIMAL_SEP = localeBackup.NUMBER_FORMATS.DECIMAL_SEP;
                        }
                        break;
                    // if 'useSimplifiedGroupSep' is passed, use special cases for thousand/group separator as outlined by loc
                    case 'useSimplifiedGroupSep':
                        var nbsp = ['fr-ca', 'fr-fr', 'ru-ru'];
                        var noNbsp = ['es-es', 'de-de', 'it-it', 'ja-jp', 'ko-kr', 'pt-br', 'pt-pt', 'th-th', 'zh-cn', 'zh-tw'];
                        if (_.contains(nbsp, $locale.id.toLowerCase())) {
                            $locale.NUMBER_FORMATS.GROUP_SEP = "\u00a0";
                        } else if (_.contains(noNbsp, $locale.id.toLowerCase())) {
                            $locale.NUMBER_FORMATS.GROUP_SEP = "";
                        } else {
                            $locale.NUMBER_FORMATS.GROUP_SEP = localeBackup.NUMBER_FORMATS.GROUP_SEP;
                        }
                        break;
                    // set $locale formats to defaults from localeBackup
                    default:
                        $locale.NUMBER_FORMATS = angular.copy(localeBackup.NUMBER_FORMATS);
                }
                var g = srcFilter.apply(this, arguments);
                return g;
            }

            return extendsFilter;
        }]);

        // decorate the currency filter to check for ISO currency code instead of symbol (and format
        // accordingly based on currency + respective/generic locale for currency )
        $provide.decorator('currencyFilter', ['$delegate', '$locale', 'localeBackup', 'currencyFormats', function($delegate, $locale, localeBackup, currencyFormats) {
            var srcFilter = $delegate;
            var extendsFilter = function() {
                // if received 3-letter ISO currency code instead of symbol
                // and it's available in currencyFormats factory
                if (arguments[0] !== null && arguments[1] && arguments[1].length === 3 && currencyFormats.getCurrencyByCode(arguments[1]) !== undefined) {
                    var currencyCode = arguments[1];
                    // set defaults
                    var GROUP_SEP = ",";
                    var DECIMAL_SEP = ".";
                    var PATTERN = {
                        "gSize": 3,
                        "lgSize": 3,
                        "maxFrac": 2,
                        "minFrac": 2,
                        "minInt": 1,
                        "negPre": "-\u00a4",
                        "negSuf": "",
                        "posPre": "\u00a4",
                        "posSuf": ""
                    };
                    var groupA = ['EUR', 'DKK', 'NOK', 'SEK', 'TRY', 'TRY', 'VND', 'CLP', 'COP', 'HRK', 'IDR', 'BRL'];
                    var groupB = ['BGN', 'CZK', 'HUF', 'PLN', 'RON', 'RUB'];
                    if (_.contains(groupA, currencyCode)) {
                        DECIMAL_SEP = ",";
                        GROUP_SEP = ".";
                    } else if (_.contains(groupB, currencyCode)) {
                        DECIMAL_SEP = ",";
                        GROUP_SEP = "\u00a0";
                    }
                    if (currencyCode === 'EUR') {
                        PATTERN = {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "\u00a0\u00a4",
                            "posPre": "",
                            "posSuf": "\u00a0\u00a4"
                        };
                    }
                    // space before symbol
                    var groupC = ['DKK', 'NOK', 'SEK', 'BGN', 'HRK', 'CZK', 'HUF', 'PLN', 'QAR', 'RON', 'RUB', 'TRY', 'TZS'];
                    if (_.contains(groupC, currencyCode)) {
                        PATTERN.negPre = "-";
                        PATTERN.posPre = "";
                        PATTERN.negSuf = "\u00a0\u00a4";
                        PATTERN.posSuf = "\u00a0\u00a4";
                    }
                    // no space before symbol
                    if (currencyCode === 'VND' || currencyCode === 'KZT') {
                        PATTERN.negPre = "-";
                        PATTERN.posPre = "";
                        PATTERN.negSuf = "\u00a4";
                        PATTERN.posSuf = "\u00a4";
                    }
                    // space after symbol
                    var groupD = ['AED', 'TWD', 'CHD', 'SGD', 'SAR', 'PKR', 'NGN', 'ILS', 'IDR', 'INR', 'HKD', 'CHF', 'BRL'];
                    if (_.contains(groupD, currencyCode)) {
                        PATTERN.negPre = "\u00a4\u00a0-";
                        PATTERN.posPre = "\u00a4\u00a0";
                        PATTERN.negSuf = "";
                        PATTERN.posSuf = "";
                    }
                    // update locale settings to reflect currenct formatting
                    var currency = currencyFormats.getCurrencyByCode(currencyCode);
                    arguments[1] = currency.symbol; // set symbol
                    $locale.NUMBER_FORMATS.DECIMAL_SEP = DECIMAL_SEP;
                    $locale.NUMBER_FORMATS.GROUP_SEP = GROUP_SEP;
                    $locale.NUMBER_FORMATS.PATTERNS[1] = angular.copy(PATTERN);
                    $locale.NUMBER_FORMATS.PATTERNS[1].maxFrac = currency.fraction;

                    // special cases / return post-processing:
                    var r = srcFilter.apply(this, arguments);
                    if (currencyCode === 'INR') {
                        return r.replace(/\.0*$/, "");
                    }
                    if (currencyCode === 'RUB') {
                        return r.replace(/,0*\u00a0р.$/, "\u00a0р.");
                    }
                    if (currencyCode === 'SGD') {
                        return r.replace(/^S\$\u00a00\./, "S$\u00a0.");
                    }
                    if (currencyCode === 'IDR') {
                        if (arguments[0] > 1000000) {
                            return r.replace(/\.([0-9]{3})\.000$/, ",$1juta");
                        } else {
                            return r.replace(/\.000$/, "ribu");
                        }
                    }
                } else {
                    // set $locale formats to defaults from localeBackup
                    $locale.NUMBER_FORMATS = angular.copy(localeBackup.NUMBER_FORMATS);
                }
                // apply settings to default filter + return
                var g = srcFilter.apply(this, arguments);
                return g;
            }
            return extendsFilter;
        }]);
    }]);
});
