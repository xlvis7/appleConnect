define(['sbl!app'], function (itcApp) {
    
    // Build: Build Details
    itcApp.factory( 'buildDetailsService', function($http){
        return {
            load: function(adamId, trainVersion, buildVersion, platform) {
                var url = global_itc_path + '/ra/apps/'+adamId+( platform ? '/platforms/'+platform : '')+'/trains/'+trainVersion+'/builds/'+buildVersion+'/details';
                return $http.get(url).then(function (response) {
                    return response.data;
                }, function(error) { return error; });
            }
        };
    });
    
    // Versions:
    //    /ra/apps/1000003940/stateHistory?platform=ios
    //    /ra/apps/1000003940/versions/811870346/stateHistory
    // Builds:
    //    /ra/apps/1000003940/buildHistory?platform=ios
    //    /ra/apps/1000003940/trains/1.0/buildHistory?platform=ios

    itcApp.factory( 'appHistoryService', function ($http) {
        return {
            loadVersionHistory: function(adamId, platform) {
                var query = global_itc_path + '/ra/apps/'+adamId+'/stateHistory?platform='+platform;
                return $http.get( query ).then(
                    function (response) { return response.data; },
                    function (error)    { return error }
                );
            },
            loadVersion: function(adamId, platform, versionId) {
                var query = global_itc_path + '/ra/apps/'+adamId+'/versions/'+versionId+'/stateHistory?platform='+platform;
                return $http.get( query ).then(
                    function (response) { return response.data; },
                    function (error)    { return error }
                );
            },
            loadTrainHistory: function(adamId, platform) {
                var query = global_itc_path + '/ra/apps/'+adamId+'/buildHistory?platform='+platform;
                return $http.get( query ).then(
                    function (response) { return response.data; },
                    function (error)    { return error }
                );
            },
            loadTrain: function(adamId, platform, trainVersion) {
                var query = global_itc_path + '/ra/apps/'+adamId+'/trains/'+trainVersion+'/buildHistory?platform='+platform;
                return $http.get( query ).then(
                    function (response) { return response.data; },
                    function (error)    { return error }
                );
            }
        };
    });


    itcApp.factory( 'betaStateResolver', [ function() {
        return {
            // 0 = red, 1 = yellow, 2 = green   (-1 = blank status (grey))
            dict: {
                'active': 2,
                'approved': 2,
                'approvedInactive': 1,
                'deleted': 0,
                'devRejected': 0,
                'developerRemovedFromSale': 0,
                'inactive': -1,
                'inExtendedReview': 1,
                'inReview': 1,
                'invalidBinary': 0,
                'metadataRejected': 0,
                'missingScreenshot': 1,
                'parking': 1,
                'pendingContract': 1,
                'pendingDeveloperRelease': 1,
                'prepareForUpload': 1,
                'processing': 1,
                'readyForSale': 2,
                'readyToTest': 2,
                'rejected': 0,
                'removedFromSale': 1,
                'replaced': 1,
                'uploadReceived': 1,
                'submitForReview': 1,
                'waiting': 1,
                'waitingForExportCompliance': 1,
                'waitingForReview': 1,
                'waitingForUpload': 1
            },
            // receives key, and returns localized string
            translate: function( l10n, state ) {
                if (!l10n) return state;
                var text = null;
                if (l10n.keys['ITC.apps.universal.buildStatus.'+state]) {
                  text = l10n.interpolate('ITC.apps.universal.buildStatus.'+state);
                } else if (l10n.keys['ITC.apps.status.'+state]) {
                  text = l10n.interpolate('ITC.apps.status.'+state);
                }
                if (text && text !== 'none') return text;
                return ' ';
            },
            // receives key, and returns CSS class
            getIconClass: function( state ) {
                var value = this.dict[state];
                switch (value) {
                   case -1:  return '';          // grey
                    case 0:  return 'bad';       // red
                    case 1:  return 'neutral';   // yellow
                    case 2:  return 'good';      // green
                    default: return 'no-status'; // 
                }
            }
        }
    }]);


    itcApp.factory( 'betaSoftwareServices', function() {
        // Helper function to sort trains or builds by version string
        var sortByVersion = function(s1, s2) {

            var v1parts = (typeof s1.split === 'function') ? s1.split('.') : [ toString(s1) ],
                v2parts = (typeof s2.split === 'function') ? s2.split('.') : [ toString(s2) ];

            function isValidPart(x) {
                return (/^\d+$/).test(x);
            }

            if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
                return NaN;
            }

            v1parts = v1parts.map(Number);
            v2parts = v2parts.map(Number);

            for (var i = 0; i < v1parts.length; ++i) {
                if (v2parts.length == i)            return 1;
                if (v1parts[i] == v2parts[i])       continue;
                else if (v1parts[i] > v2parts[i])   return 1;
                else return -1;
            }

            if (v1parts.length != v2parts.length) {
                return -1;
            }

            return 0;                
        };
        return {
            
            // Invoked upon a build when it first arrives from the server.
            // Adds helpful values for interpreting + processing a build, such as whether or not it has variants, etc.
            parseBuild: function( build ) {
                
                var b = build;
                
                // if 'sizesInBytes' is present and populated, we know the build has device variants
                if ( b.hasVariants === undefined ) {
                     b.hasVariants = (typeof b.sizesInBytes === 'object' && _.size(b.sizesInBytes) > 0) || null;
                }
                
                // Make sure a build's platform is available as 'platform' (sometimes it arrives as 'appPlatform')
                if ( b.appPlatform && b.platform !== b.appPlatform ) {
                    b.platform = String( b.appPlatform )
                }
                
                if ( b.processingState === 'invalidBinary' || b.processingState === 'processingFailed' ) {
                    b.hasFatalErrors = true;
                }
                
                   
                return b;
            },

            ensureThingHasTO: function( thing, key ) {
                
                key = key || 'internalTesting';
                
                thing[ key ] = thing[ key ] || {
                    errorKeys: null,
                    isEditable: true,
                    isRequired: false,
                    value: false
                }
                
                return thing;
            },
            
            isBuildBetaEntitled: function( build ) {
                var b = build;
                if (b.processing) return null;
                if (b.betaEntitled !== undefined && b.betaEntitled === true) return true;
                var statuses = [ b.internalState, b.externalState, b.externalStatus ].join('');
                if (/noBetaEntitlement/i.test(statuses)) return false;
                return false;
            },
            
            doesBuildHaveFatalError: function( build ) {
                if (!build) return;
                if (build.processingState === 'invalidBinary') return true;
                if (build.processingState === 'processingFailed') return true;
                return false;
            },
            
            // Accepts an array of train objects, and sorts them by versionString
            // e.g. trainObject.sort( betaSoftwareServices.sortTrains )  --->  returns sorted "trainObject"
            sortTrains: function(v1,v2) {
                return sortByVersion(v1.versionString, v2.versionString);
            },
            sortBuilds: function(v1,v2) {
                return sortByVersion(v1.buildVersion, v2.buildVersion);
            }
            
        } 
    });

});
